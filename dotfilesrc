#
# define some colors to make output pretty
#
BLACK="$(tput setaf 0)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
ORANGE="$(tput setaf 3)"
PURPLE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
GRAY="$(tput setaf 8)"

#
# No Color, although this will turn off all attributes, not just color
#
NC="$(tput sgr0)"
BOLD="$(tput bold)"


#
# determine the shell
#
export USER_SHELL=$(ps -p $$ -ocomm= | sed "s/-//" )


#
# set up common history variables
#
export HISTSIZE=50000
export SAVEHIST=50000
export HISTFILESIZE=50000
export HISTFILE=~/.${USER_SHELL}_history


#
# Change the prompt.
#
# Display the host name during an SSH session
#
[[ -n $SSH_CLIENT ]] && PROMPT_HOST="[$USER SSH into $(hostname -s)]:"


#
# export the prompt variable, PS1
# add the working directory and the '❯'
#
if [[ $USER_SHELL = bash ]]; then
    #
    # Bash uses \w to show the current directory
    #
    export PS1="\[${ORANGE}\]${PROMPT_HOST} \[${CYAN}\]\w\n \[${ORANGE}\]❯ \[${NC}\]"

    #
    # setup bash history
    #
    export HISTCONTROL=ignoredups:erasedups  # no duplicate entries
    shopt -s histappend                      # append to history, don't overwrite it


    # Save and reload the history after each command finishes
    export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

elif [[ $USER_SHELL = zsh ]]; then
    #
    # handle newline weirdness in zsh
    #
    NEWLINE=$'\n'
    export PS1="%F{167}${PROMPT_HOST}%f %F{039}%~ %f${NEWLINE} %F{167}❯%f "

    #
    # zsh also needs some help when it comes to command completion
    #
    autoload -U compinit
    compinit

    #
    # setup zsh history specifics
    #
    setopt append_history
    setopt extended_history
    setopt hist_expire_dups_first
    setopt hist_ignore_all_dups
    setopt hist_ignore_space
    setopt hist_verify
    setopt inc_append_history
    setopt share_history
    setopt autopushd pushdminus pushdsilent pushdtohome pushdignoredups
else
    #
    # The default it just "Username on Hostname >"
    #
    export PS1="$USER on $(hostname -s) ❯ "
fi

#
# change colors of ls
#
export CLICOLOR=1
export LSCOLORS=GxHxcxdxCxegedabagacad


#
# here we follow any symlinked .rc files to their targets
# We use this directory to run other shell scripts in the dotfiles repo
#
SOURCE=~
if [[ $USER_SHELL = bash ]]; then
    SOURCE="${BASH_SOURCE[0]}"
elif [[ $USER_SHELL = zsh ]]; then
    SOURCE=${(%):-%N}
fi


#
# keep resolving the source of this script until it is no
# longer a symlink
#
while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done


#
# now we have the path to the dotfiles folder.  Add any further
# customizations, aliases, functions, etc.
#
DOTFILES_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
if [[ -d $DOTFILES_DIR ]]; then
    #
    # add any user aliases
    #
    [[ -f $DOTFILES_DIR/aliases ]] && source $DOTFILES_DIR/aliases

    #
    # add functions for the shell
    #
    FUNCTION_FILE_NAME=${USER_SHELL}_functions
    [[ -f $DOTFILES_DIR/${FUNCTION_FILE_NAME} ]] && source $DOTFILES_DIR/${FUNCTION_FILE_NAME}

    #
    # any local user functions will be in local_functions
    #
    [[ -f $DOTFILES_DIR/local_functions ]] && source $DOTFILES_DIR/local_functions
fi
